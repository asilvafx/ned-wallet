 
<div class="position-relative mb-4"> 
   <div class="w-100 mb-4">
       <span class="h1">New Role</span>
       <p class="text-body-secondary">Manage the website content, update settings, and more.</p>
   </div>
   <form id="newRoleForm"> 

       <div class="input-group mb-4">
       <span class="input-group-text">
           <svg class="icon">
             <use xlink:href="/public/assets/icons/svg/free.svg#cil-user"></use>
           </svg>
       </span>
       <input class="form-control" type="text" id="name" name="name" placeholder="Role Name" required="">
       </div>

       <div class="w-100 d-flex flex-column mb-4">
       <label for="description" class="text-body-secondary mb-2">Description:</label>
       <textarea class="form-control" id="description" name="description" placeholder="Enter role description here (optional)"></textarea>
       </div>  


       <div class="w-100 d-flex justify-content-between align-items-center mb-2"> 
        <div class="me-auto">
            <label for="description" class="text-body-secondary">Permissions:</label>
        </div> 
        <div class="ms-auto d-flex align-items-center gap-2"> 
        <input class="form-checkbox" type="checkbox" id="fullAccess" name="fullAccess">
        <label for="fullAccess" class="text-body-secondary">Full Access?</label>
        </div>
       </div>
       <div class="input-group mb-4">
           <span class="input-group-text">
               <svg class="icon">
                 <use xlink:href="/public/assets/icons/svg/free.svg#cil-shield-alt"></use>
               </svg>
           </span>
           <select class="form-select" id="access" name="access" required="" multiple=""> 
               <repeat group="{{@permissionsAll}}" value="{{@access}}">
                   <option value="{{@access.name}}">{{@access.name}}</option>
               </repeat>
           </select>
           <span class="w-100 text-sm text-muted mt-2">Hold Ctrl (Windows) or Command (Mac) to select multiple permissions.</span>
        </div>  

        <input type="hidden" id="token" name="token" value="{{@TOKEN}}"> 

        <div class="w-100 d-flex justify-content-between align-items-center"> 
            <div class="position-relative">
                <button class="btn btn-secondary" type="reset" onclick="window.location.href='/{{@SITE.uri_backend}}/access'; void(0);">‚Üê Go back</button>
            </div>
            <div class="position-relative">
                <button class="btn btn-primary" type="submit">Create role</button>
            </div>
        </div>
   </form>
</div>

<script>
   "use strict"

   // Initialization
   const newRoleForm = document.getElementById('newRoleForm'); 
   const token = document.querySelector('#token');   
         
   // Form Fields
   const name = document.getElementById('name');
   const description = document.getElementById('description');
   const access = document.getElementById('access'); 
   const fullAccess = document.getElementById('fullAccess'); // Full Access checkbox

    // Event Listener for Full Access checkbox
    if (fullAccess) {
        fullAccess.addEventListener('change', function() {
            if (fullAccess.checked) {
                // If fullAccess is checked, select all options and disable the select box
                Array.from(access.options).forEach(option => option.selected = true);
                access.disabled = true;
            } else {
                // If fullAccess is unchecked, clear selections and enable the select box
                Array.from(access.options).forEach(option => option.selected = false);
                access.disabled = false;
            }
        });
    }

    // Submit Form
    if(newRoleForm){
    newRoleForm.addEventListener('submit', function(e){
        e.preventDefault();
        
        if (name.value == "" || (!fullAccess.checked && access.value == "")) {
            showAlert('error', 'Form incomplete, please fill all required fields and try again.');
            return false;
        }

        const schema = {};  
        schema['name'] = name.value;
        schema['description'] = description.value;

        if (fullAccess.checked) {
            schema['access'] = "*"; // Set to "*" if full access is checked
        } else {
            const selectedAccess = Array.from(access.selectedOptions).map(option => option.value);
            schema['access'] = selectedAccess;
        }

        const payload = {
            token: token.value, 
            schema: schema, 
        }  

        let uri_request = "access/roles/add?save";
        fetchRequest(payload, uri_request, newRoleForm);
    });
    }

     // Add Event Listeners
     async function fetchRequest(formData, url, formEl) {
       event.preventDefault();  
       hideAlerts();

       // Disable all inputs and submit button
       const inputs = newRoleForm.querySelectorAll('input, select, button');
       inputs.forEach(input => input.disabled = true);

       try {
           const response = await axios.post("/{{@SITE.uri_backend}}/" + url, formData, {
               headers: {
                   "Content-Type": "application/json",
               },
           }).then(response => {
               const data = response.data;
               if (data.status === "success") {
                   showAlert("success", response.data.message);  
                   // Clear form inputs if success
                   clearForm(formEl);
               } else {
                   showAlert("error", response.data.message);
               }
           }).finally(() => {
               // Re-enable all inputs and submit button
               inputs.forEach(input => input.disabled = false);
           });

       } catch (error) {
           showAlert("error", "Error creating user. Please try again later.");
           // Re-enable all inputs and submit button in case of error
           inputs.forEach(input => input.disabled = false);
       }
   }
 
</script>
