 
<div class="position-relative mb-4">

    <check if="{{ isset(@notfound) }}">
        <true> 
            <div class="w-100 mb-4">
                <span class="h1">Not Found</span>
                <p class="text-body-secondary">Role was not found in our records.</p>
            </div> 
            <div class="position-relative">
                <button class="btn btn-secondary" type="reset" onclick="window.location.href='/{{@SITE.uri_backend}}/access/roles'; void(0);">← Go back</button>
            </div>
        </true>
        <false>
            <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="deleteModalLabel">Are you sure?</h5>
                      <button class="btn-close" type="button" data-ui-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form id="newEntyForm">
                    <div class="modal-body">
                     
                        Are you sure you want to delete this user? This action cannot be undone.
            
                    </div>
                    <div class="modal-footer">
                      <button class="btn btn-secondary" type="button" data-ui-dismiss="modal">Cancel</button>
                      <button class="btn btn-danger" type="submit" id="deleteRole">Yes, delete it</button>
                    </div>
                  </form>
                  </div>
                </div>
            </div> 
            <div class="w-100 mb-4">
                <span class="h1">Edit Role</span>
                <p class="text-body-secondary">Manage the website content, update settings, and more.</p>
            </div>

            <form id="editRoleForm">  
                <div class="input-group mb-4">
                <span class="input-group-text">
                    <svg class="icon">
                      <use xlink:href="/public/assets/icons/svg/free.svg#cil-user"></use>
                    </svg>
                </span>
                <input class="form-control" type="text" id="name" name="name" placeholder="Role Name" value="{{@role.name}}" required="">
                </div>
         
                <div class="w-100 d-flex flex-column mb-4">
                <label for="description" class="text-body-secondary mb-2">Description:</label>
                <textarea class="form-control" id="description" name="description" placeholder="Enter role description here (optional)">{{@role.description}}</textarea>
                </div>  
          
                <div class="w-100 d-flex justify-content-between align-items-center mb-2"> 
                 <div class="me-auto">
                     <label for="description" class="text-body-secondary">Permissions:</label>
                 </div> 
                 <div class="ms-auto d-flex align-items-center gap-2"> 
                 <input class="form-checkbox" type="checkbox" id="fullAccess" name="fullAccess"  {{ @role.access==='*' ? 'checked' : '' }}>
                 <label for="fullAccess" class="text-body-secondary">Full Access?</label>
                 </div>
                </div>
                <div class="input-group mb-4">
                    <span class="input-group-text">
                        <svg class="icon">
                          <use xlink:href="/public/assets/icons/svg/free.svg#cil-shield-alt"></use>
                        </svg>
                    </span>
                    <select class="form-select" id="access" name="access" required="" multiple=""> 
                        <repeat group="{{@permissionsAll}}" value="{{@access}}">
                            <option value="{{@access.name}}" {{ @role.access==='*' || str_contains(@role.access, @access.name) ? 'selected' : '' }} >{{@access.name}}</option>
                        </repeat>
                    </select>
                    <span class="w-100 text-sm text-muted mt-2">Hold Ctrl (Windows) or Command (Mac) to select multiple permissions.</span>
                 </div>  
         
                 <input type="hidden" id="roleId" name="roleId" value="{{@role.id}}"> 
                 <input type="hidden" id="token" name="token" value="{{@TOKEN}}"> 
         
 
                <div class="w-100 d-flex flex-wrap justify-content-start align-items-center gap-2"> 
                    <div class="position-relative">
                        <button class="btn btn-secondary" type="reset" onclick="window.location.href='/cp-admin/access/roles'; void(0);">← Go back</button>
                    </div>
                    <div class="ms-auto position-relative">
                        <button class="btn btn-danger" type="button" aria-label="Delete" data-ui-toggle="modal" data-ui-target="#deleteModal">Delete</button>
                    </div>
                    <div class="position-relative">
                        <button class="btn btn-primary" type="submit">Save changes</button>
                    </div>
                </div>
            </form>

        </false>
    </check>
</div>


<script>
    "use strict" 
          
    // Form Fields
    const editRoleForm = document.getElementById('editRoleForm'); 
    const name = document.getElementById('name');
    const description = document.getElementById('description');
    const access = document.getElementById('access'); 
    const fullAccess = document.getElementById('fullAccess'); // Full Access checkbox
    const roleId = document.querySelector('#roleId'); 
    const deleteRole = document.getElementById('deleteRole');
 
     // Event Listener for Full Access checkbox
     if (fullAccess) {
         fullAccess.addEventListener('change', function() {
             if (fullAccess.checked) {
                 // If fullAccess is checked, select all options and disable the select box
                 Array.from(access.options).forEach(option => option.selected = true);
                 access.disabled = true;
             } else {
                 // If fullAccess is unchecked, clear selections and enable the select box
                 Array.from(access.options).forEach(option => option.selected = false);
                 access.disabled = false;
             }
         });
     }

     // Submit Delete Form
    if(deleteRole){
        deleteRole.addEventListener('click', function(e){
            e.preventDefault();

            const schema = {};  
            schema['roleId'] = roleId.value;

            const payload = {
                token: token.value, 
                schema: schema, 
            }  

            let uri_request = "access/roles/edit?delete"; 
            fetchRequest(payload, uri_request, null);
        })

    }
 
     // Submit Edit Form
     if(editRoleForm){
     editRoleForm.addEventListener('submit', function(e){
         e.preventDefault();
         
         if (name.value == "" || (!fullAccess.checked && access.value == "")) {
             showAlert('error', 'Form incomplete, please fill all required fields and try again.');
             return false;
         }
 
         const schema = {};  
         schema['id'] = roleId.value;
         schema['name'] = name.value;
         schema['description'] = description.value;
 
         if (fullAccess.checked) {
             schema['access'] = "*"; // Set to "*" if full access is checked
         } else {
             const selectedAccess = Array.from(access.selectedOptions).map(option => option.value);
             schema['access'] = selectedAccess;
         }
 
         const payload = {
             token: token.value, 
             schema: schema, 
         }  
 
         let uri_request = "access/roles/edit?save";
         fetchRequest(payload, uri_request, editRoleForm);
     });
     }
 
      // Add Event Listeners
      async function fetchRequest(formData, url, dataForm) {
        event.preventDefault();  
        hideAlerts();
 
        // Disable all inputs and submit button
        let inputs = dataForm;
        if(inputs){
            inputs = inputs.querySelectorAll('input, select, button');
            inputs.forEach(input => input.disabled = true);
        }  
 
        try {
            const response = await axios.post("/{{@SITE.uri_backend}}/" + url, formData, {
                headers: {
                    "Content-Type": "application/json",
                },
            }).then(response => {
                const data = response.data;
                if (data.status === "success") {
                    
                    showAlert("success", response.data.message);  

                    if(!inputs){
                        window.location.reload();
                        return false;
                    }
                    // Clear form inputs if success
                    //clearForm();
                } else {
                    showAlert("error", response.data.message);
                }
            }).finally(() => {
                // Re-enable all inputs and submit button
                if(inputs){
                    inputs.forEach(input => input.disabled = false);
                }
               
            });
 
        } catch (error) {
            showAlert("error", "Error creating user. Please try again later.");
            // Re-enable all inputs and submit button in case of error
            if(inputs){
            inputs.forEach(input => input.disabled = false);
            }
        }
    }
  
 </script>
