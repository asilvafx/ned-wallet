
<check if="{{@CXT->confirmed==0}}">
<!-- Email Confirmation Modal -->
<div class="modal fade" id="emailConfirmationModal" tabindex="-1" aria-labelledby="emailConfirmationModalLabel" aria-hidden="true">
<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="emailConfirmationModalLabel">Email Confirmation</h5>
            <button type="button" class="btn-close" data-ui-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <div data-confirm-step="1"> 
            <p>We will send you a one-time passcode to your registered email address. Please check your inbox and enter the 6-digits code to verify your email.</p>
            <button type="button" aria-label="Send Email" class="btn btn-primary w-100" onclick="confirmEmail(1, this); void(0);">Send Email</button>
            </div>
            <div class="hidden" data-confirm-step="2"> 
                <p>OTP sent to {{@CXT->email}}. Check your email inbox and spam/junk folders. </p>
                <p class="text-body-secondary small">Enter the 6-digits code:</p>
              <div class="otp-input confirmInputs mb-4">
                    <input class="border shadow-sm" type="number" min="0" max="9" required="" placeholder="0">
                    <input class="border shadow-sm" type="number" min="0" max="9" required="" placeholder="0">
                    <input class="border shadow-sm" type="number" min="0" max="9" required="" placeholder="0">
                    <input class="border shadow-sm" type="number" min="0" max="9" required="" placeholder="0">
                    <input class="border shadow-sm" type="number" min="0" max="9" required="" placeholder="0">
                    <input class="border shadow-sm" type="number" min="0" max="9" required="" placeholder="0">
                </div>
                <button type="button" aria-label="Verify" class="btn btn-primary w-100" onclick="confirmEmail(2, this); void(0);">Verify</button>
            </div>
        </div>
    </div>
</div>
</div>
</check>

<div class="position-relative mb-5">
<div class="w-100 mb-4">
    <span class="h1">My Account</span> 
</div>
<div class="w-100 mb-4">


  <check if="{{@CXT->confirmed==0}}">
  <div class="alert alert-dismissible border fade show mb-4" role="alert">  
      <p>
        <h5 class="text-warning">
        <svg class="icon">
          <use xlink:href="{{@PUBLIC}}/assets/icons/svg/free.svg#cil-envelope-letter"></use>
        </svg>
        Email Confirmation
        </h5>
      </p>
      <p>You haven't confirmed your email address yet. Please ensure it is verified to receive important notifications. </p>
      <p>
      <a class="btn btn-primary btn-sm" aria-label="Verify Email" role="button" data-ui-toggle="modal" data-ui-target="#emailConfirmationModal" class="alert-link">
        Verify Now
      </a>
      </p>
      <a role="button" class="btn-close" data-ui-dismiss="alert" id="confirmExit" aria-label="Close"></a>
    </div> 
    </check>


</div>
<div class="w-100">
    <div class="w-100 card p-4">
        <div class="d-flex flex-wrap justify-content-center justify-content-md-start align-items-center gap-2">
            <div class="col-4 col-md-3 d-flex flex-column align-items-center text-">
                <img id="profileImage" class="rounded" src="{{@CXT->avatar}}" alt="Profile Image">
            </div> 
            <div class="d-flex flex-column align-items-center text-center gap-2">
                <button type="button" class="btn px-4 py-2 btn-dark d-flex align-items-center my-2" id="upload">
                    <svg class="icon me-2">
                        <use xlink:href="{{@PUBLIC}}/assets/icons/svg/free.svg#cil-cloud-upload"></use>
                    </svg> 
                    Upload new photo
                </button>
                <p class="text-body-secondary">
                    At least 800x800 px recommended.</br>
                    JPG or PNG is allowed 
                </p> 
                <div id="imageButtons" class="d-none">
                    <button id="confirmImage" class="btn btn-primary">Confirm Changes</button>
                    <button id="cancelImage" class="btn btn-secondary">Cancel</button>
                </div>
                <input type="file" class="opacity-0 w-0" id="fileAvatar" name="fileAvatar" accept="image/*"> 
            </div>
        </div>

        <div class="w-100 mt-4">
            <div class="bg-color border rounded p-2 p-lg-3">
                <div class="d-flex justify-content-between align-items-center mb-4 p-2"> 
                    <span class="fs-5 fw-bolder">Personal Info</span>
                    <a role="button" aria-label="Edit Profile" id="editProfile" class="btn btn-sm d-flex align-items-center bg-alt text-alt">
                        <svg class="icon me-2">
                            <use xlink:href="{{@PUBLIC}}/assets/icons/svg/free.svg#cil-pencil"></use>
                        </svg> 
                        Edit
                    </a>
                </div>
                <div class="w-100 d-flex flex-wrap">
                    <form id="profileForm">
                        <div class="col d-flex flex-column p-2">
                            <span class="text-body-secondary mb-1">Full name</span> 
                            <input class="bg-transparent border-0 pe-none" type="text" id="userDisplayName" placeholder="Full Name" value="{{!empty(@CXT->displayName)?@CXT->displayName:'NA'}}"> 
                        </div>  
                        <div class="col d-flex flex-column p-2">
                            <span class="text-body-secondary mb-1">Phone</span>
                            <input class="bg-transparent border-0 pe-none" type="tel" id="userPhone" pattern="[0-9+]*" placeholder="Not provided" value="{{@CXT->phone}}"> 
                        </div>
                        <div class="col d-flex flex-column p-2">
                            <span class="text-body-secondary mb-1">Email</span>
                            <div class="d-flex flex-wrap gap-2">
                              <span class="pe-none">{{@CXT->email}}</span><div class="position-relative"><span class="badge bg-{{@CXT->confirmed?'success':'danger'}}">{{@CXT->confirmed?'Confirmed':'Not Confirmed'}}</span></div>
                            </div>
                        </div>
                        <div class="position-relative mt-4 mb-2 mx-2">
                            <button type="submit" class="btn btn-primary d-none" id="saveProfileChanges" aria-label="Save changes">Save changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="w-100 mt-4">
            <div class="bg-color border rounded p-2 p-lg-3">
                <div class="d-flex justify-content-between align-items-center mb-4 p-2"> 
                    <span class="fs-5 fw-bolder">Bio</span>
                    <a role="button" aria-label="Edit Bio" id="editBio" class="btn btn-sm d-flex align-items-center bg-alt text-alt">
                        <svg class="icon me-2">
                            <use xlink:href="{{@PUBLIC}}/assets/icons/svg/free.svg#cil-pencil"></use>
                        </svg> 
                        Edit
                    </a>
                </div>
                <div class="w-100"> 
                    <div class="input-group mb-4 position-relative"> 
                        <span class="px-2" id="userBioSpan">
                            
                            <check if="{{!empty(@CXT->bio)}}">
                                <true>
                                    <span class="text-body">{{@CXT->bio}}</span>
                                </true>
                                <false>
                                    <span class="fst-italic text-muted">Tell us about yourself..</span>
                                </false>
                            </check>
                        </span>
                        <textarea oninput="updateCharCount(this);" class="form-control bg-transparent d-none" id="userBio" name="userBio" aria-label="Enter Bio here" placeholder="Type your bio here" maxlength="250">{{@CXT->bio}}</textarea>
                        <small id="charCount" class="charCounter text-body-secondary d-none">250 characters remaining</small>
                    </div>
                    <button type="button" class="btn btn-primary d-none" id="saveBioChanges">Save changes</button>
                </div>
            </div>
        </div>
    </div>
</div> 
</div>

<div class="d-flex flex-wrap gap-4 px-2 justify-content-center justify-content-lg-start">
<div class="position-relative">
    <a role="button" class="btn btn-danger" aria-label="Delete" href="/{{@SITE.uri_backend}}/profile">
        <svg class="icon">
            <use xlink:href="{{@PUBLIC}}/assets/icons/svg/free.svg#cil-trash"></use>
        </svg>
        Delete Account
    </a>
</div>
<div class="position-relative">
    <a role="button" class="btn bg-alt" aria-label="Security" href="/{{@SITE.uri_backend}}/account/security">
        <svg class="icon">
            <use xlink:href="{{@PUBLIC}}/assets/icons/svg/free.svg#cil-shield-alt"></use>
        </svg>
        Account Security
    </a>
</div>
</div>

<input type="hidden" id="token" name="token" value="{{@TOKEN}}">

<script>

"use strict";

// DOM elements
const upload = document.getElementById('upload');
const fileAvatar = document.getElementById('fileAvatar');
const profileImage = document.getElementById('profileImage');
const confirmImage = document.getElementById('confirmImage');
const cancelImage = document.getElementById('cancelImage');
const imageButtons = document.getElementById('imageButtons');
const editProfile = document.getElementById('editProfile');
const saveProfileChanges = document.getElementById('saveProfileChanges');
const userDisplayName = document.getElementById('userDisplayName');
const userEmail = document.getElementById('userEmail');
const userPhone = document.getElementById('userPhone');

let originalAvatar = profileImage.src; // Store the original avatar

userPhone.addEventListener('keypress', function(e){
// Get the character code of the pressed key
const charCode = e.which || e.keyCode;
// Get the character from the charCode
const charStr = String.fromCharCode(charCode);

// Regular expression to match only digits (0-9) and plus (+) sign
const validChars = /^[0-9+]$/;

// If the character doesn't match the allowed pattern, prevent the input
if (!validChars.test(charStr)) {
    e.preventDefault();
}
}) 

// Show file picker
upload.addEventListener('click', (e) => {
e.preventDefault();
fileAvatar.click();
});

// Handle file selection and image preview
fileAvatar.addEventListener('change', (e) => {
const file = fileAvatar.files[0];

if (file && file.type.startsWith('image/')) {
    const reader = new FileReader();
    reader.onload = (event) => {
        profileImage.src = event.target.result;
        toggleImageButtons(true); // Show confirm and cancel buttons
    };
    reader.readAsDataURL(file);
} else {
    showAlert('error', 'Please upload a valid image file.');
}
});

// Toggle visibility of confirm/cancel buttons
function toggleImageButtons(show) {
if (show) {
    imageButtons.classList.remove('d-none');
} else {
    imageButtons.classList.add('d-none');
}
}

// Confirm image upload
confirmImage.addEventListener('click', () => {
const formData = new FormData();
formData.append('file', fileAvatar.files[0]);
formData.append('token', '{{ @TOKEN }}');

axios.post('/{{@SITE.uri_backend}}/account?upload-avatar', formData, {
    headers: {
        'Content-Type': 'multipart/form-data'
    }
})
.then(() => {
    showAlert('success', 'Profile image updated successfully!');
    originalAvatar = profileImage.src; // Update the original avatar to the new one
    toggleImageButtons(false); // Hide confirm/cancel buttons
})
.catch((error) => {
    console.error('There was an error uploading the file!', error);
});
});

// Cancel image upload and revert to the original avatar
cancelImage.addEventListener('click', () => {
profileImage.src = originalAvatar; // Revert to original avatar
fileAvatar.value = ''; // Reset file input
toggleImageButtons(false); // Hide confirm/cancel buttons
});

// Toggle edit mode for profile fields
editProfile.addEventListener('click', () => {
const isEditable = userDisplayName.contentEditable === "true";
toggleEditMode(!isEditable); // Toggle between editable and non-editable
});

// Toggle profile fields edit mode
function toggleEditMode(enable) {
if(enable){  
    userDisplayName.classList.remove('border-0');
    userDisplayName.classList.add('border'); 
    userDisplayName.classList.remove('pe-none');
    userPhone.classList.remove('border-0');
    userPhone.classList.add('border'); 
    userPhone.classList.remove('pe-none');
} else {  
    userDisplayName.classList.add('border-0'); 
    userDisplayName.classList.add('pe-none'); 
    userPhone.classList.add('border-0');
    userPhone.classList.add('pe-none');
}
saveProfileChanges.classList.toggle('d-none', !enable);
}

// Save profile changes
saveProfileChanges.addEventListener('click', (e) => {
e.preventDefault(); 

const formData = new FormData(); 
formData.append('token', '{{ @TOKEN }}'); 
formData.append('displayName', userDisplayName.value); 
formData.append('phone', userPhone.textContent.value);

axios.post('/{{@SITE.uri_backend}}/account?update-profile', formData, {
    headers: {
        'Content-Type': 'multipart/form-data'
    }
})
.then((response) => {
    showAlert(response.data.status, response.data.message);
    toggleEditMode(false); // Disable edit mode after saving
})
.catch((error) => {
    console.error('There was an error updating the profile!', error);
});
});

// Get references to the textarea and the character count display
var siteDescription = document.getElementById('userBio');
var charCountDisplay = document.getElementById('charCount'); 

// DOM elements for bio section
const editBioButton = document.getElementById('editBio');
const saveBioChangesButton = document.getElementById('saveBioChanges');
const bioTextarea = document.getElementById('userBio'); 
const userBioSpan = document.getElementById('userBioSpan');  

updateCharCount(bioTextarea);

// Function to toggle bio editing mode
function toggleBioEditMode(enable) {
if (enable) {
    userBioSpan.classList.add('d-none'); // Hide default span value
    bioTextarea.classList.remove('d-none'); // Show textarea
    charCountDisplay.classList.remove('d-none'); // Show character counter
    saveBioChangesButton.classList.remove('d-none'); // Show save button
} else {
    bioTextarea.classList.add('d-none'); // Hide textarea
    charCountDisplay.classList.add('d-none'); // Hide character counter
    saveBioChangesButton.classList.add('d-none'); // Hide save button
    userBioSpan.classList.remove('d-none'); // Show default span value
}
}

// Add event listener to "Edit Bio" button
editBioButton.addEventListener('click', () => {
const isEditable = bioTextarea.classList.contains('d-none');
toggleBioEditMode(isEditable); // Show or hide textarea and save button
}); 

// Add event listener to "Save changes" button for bio
saveBioChangesButton.addEventListener('click', () => {
// Prepare bio data to send via axios

const updatedBio = bioTextarea.value.trim();

const formData = new FormData(); 
formData.append('token', '{{ @TOKEN }}');
formData.append('bio', updatedBio);

axios.post('/{{@SITE.uri_backend}}/account?update-bio', formData, {
    headers: {
        'Content-Type': 'multipart/form-data'
    }
})
.then((response) => {
    var status = response.data.status;
    if(status=="success"){
        document.getElementById('userBioSpan').innerText = updatedBio;
    }
    showAlert(status, response.data.message);
    toggleBioEditMode(false); // Disable edit mode after saving
})
.catch((error) => {
    console.error('There was an error updating the profile!', error);
});
 
});


</script>
