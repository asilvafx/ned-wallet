 
<div class="position-relative mb-4">
    <div class="w-100">
        <span class="h1">Private Key</span>
        <p class="text-body-secondary">Manage the website content, update settings, and more.</p>
    </div>
    <form id="newApiForm">  
        <div class="input-group mb-4">
        <span class="input-group-text">
            <svg class="icon">
              <use xlink:href="/public/assets/icons/svg/free.svg#cil-bolt"></use>
            </svg>
        </span>
        <input class="form-control" type="text" id="name" name="name" placeholder="API Name" required="">
        </div> 

        <input type="hidden" id="token" name="token" value="{{@TOKEN}}">

        <div class="w-100 d-flex justify-content-between align-items-center"> 
            <div class="position-relative">
                <button class="btn btn-secondary" type="reset" onclick="window.location.href='/{{@SITE.uri_backend}}/api'; void(0);">← Go back</button>
            </div>
            <div class="position-relative">
              <button class="btn btn-primary" type="submit">Create key</button>
            </div>
        </div>
    </form>
</div>

<script>
    "use strict"


    // Initilization 
    const newApiForm = document.getElementById('newApiForm'); 
    const token = document.querySelector('#token');   

    // Form Fields
    const nameInput = document.getElementById('name');


    if(newApiForm){
        newApiForm.addEventListener('submit', function(e){
            e.preventDefault();

            // Validate input value
            const inputValidate = /^[a-zA-Z0-9-_]+$/;
            if (!inputValidate.test(nameInput.value)) { 
                showAlert("error", "Key name can only contain letters, numbers, hyphens (-), or underscores (_).");
                return false;
            }

            const schema = {};  
            schema['name'] = nameInput.value;

            const payload = {
                token: token.value, 
                schema: schema, 
            }  

            let uri_request = "api/add?key";
            fetchRequest(payload, uri_request, newApiForm);
            
        })
    }


      // Add Event Listeners
      async function fetchRequest(formData, url, formEl) {
        event.preventDefault();  
        hideAlerts();

        // Disable all inputs and submit button
        const inputs = formEl.querySelectorAll('input, select, button');
        inputs.forEach(input => input.disabled = true);

        try {
            const response = await axios.post("/{{@SITE.uri_backend}}/" + url, formData, {
                headers: {
                    "Content-Type": "application/json",
                },
            }).then(response => {
                const data = response.data;
                if (data.status === "success") {
                    showAlert("success", response.data.message); 
                    // Clear form inputs if success
                    clearForm(formEl); 
                } else {
                    showAlert("error", response.data.message);
                }
            }).finally(() => {
                // Re-enable all inputs and submit button
                inputs.forEach(input => input.disabled = false);
            });

        } catch (error) {
            showAlert("error", "Error creating user. Please try again later.");
            // Re-enable all inputs and submit button in case of error
            inputs.forEach(input => input.disabled = false);
        }
    } 
</script>
